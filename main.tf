provider "aws" {
  region = "us-east-1"
}


##################################################################
# Data sources to get VPC, subnets and your Public IP
##################################################################
data "aws_vpc" "default" {
  default = true
}

data "aws_subnet_ids" "all" {
  vpc_id = data.aws_vpc.default.id
}

resource "random_pet" "this" {
  length = 2
}

data "http" "myip" {
  url = "http://ipv4.icanhazip.com"
}

module "security_group" {
  source  = "terraform-aws-modules/security-group/aws"
  version = "~> 4.0"

  name        = "alb-sg-${random_pet.this.id}"
  description = "Security group for example usage with ALB"
  vpc_id      = data.aws_vpc.default.id
  ingress_with_self = [{rule = "all-all"}]
  ingress_cidr_blocks = ["${chomp(data.http.myip.body)}/32"]
  ingress_rules       = ["http-80-tcp"]
  egress_rules        = ["all-all"]
}


##################################################################
# Application Load Balancer
##################################################################
module "alb" {
  source = "terraform-aws-modules/alb/aws"
  version = "~> 6.0"

  name = "complete-alb-${random_pet.this.id}"

  load_balancer_type = "application"

  vpc_id          = data.aws_vpc.default.id
  security_groups = [module.security_group.security_group_id]
  subnets         = data.aws_subnet_ids.all.ids

  http_tcp_listeners = [
    # Forward action is default, either when defined or undefined
    {
      port               = 80
      protocol           = "HTTP"
      target_group_index = 0
      # action_type        = "forward"
    }
  ]


  target_groups = [
    {
      name_prefix          = "h1"
      backend_protocol     = "HTTP"
      backend_port         = 80
      target_type          = "instance"
      deregistration_delay = 10
      health_check = {
        enabled             = true
        interval            = 30
        path                = "/"
        port                = "traffic-port"
        healthy_threshold   = 3
        unhealthy_threshold = 3
        timeout             = 6
        protocol            = "HTTP"
        matcher             = "200-399"
      }
      protocol_version = "HTTP1"
      targets = {
        my_ec2 = {
          target_id = module.ec2_instances.id[0]
          port      = 80
        }
      }
      tags = {
        InstanceTargetGroupTag = "CVE-Windows"
      }
    }
  ]

  tags = {
    Project = "CVE-Windows"
  }

  lb_tags = {
    MyLoadBalancer = "CVE-Windows"
  }

  target_group_tags = {
    MyGlobalTargetGroupTag = "CVE-Windows"
  }

  https_listener_rules_tags = {
    MyLoadBalancerHTTPSListenerRule = "CVE-Windows"
  }

  https_listeners_tags = {
    MyLoadBalancerHTTPSListener = "CVE-Windows"
  }

  http_tcp_listeners_tags = {
    MyLoadBalancerTCPListener = "CVE-Windows"
  }
}


##################
# Extra resources
##################



data "aws_ami" "win20H2march" {
  most_recent = true
  owners      = ["801119661308"]


  filter {
    name   = "name"
    values = ["Windows_Server-20H2-English-Core-Base-2021.04.14"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

##################
# Enable SSM Session
##################

resource "aws_iam_instance_profile" "ec2-ssm" {
  name = "ec2-ssm"
  role = aws_iam_role.role-ec2-ssm.name
}

resource "aws_iam_role" "role-ec2-ssm" {
  name = "role-ec2-ssm"
  path = "/"

  assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
               "Service": "ec2.amazonaws.com"
            },
            "Effect": "Allow",
            "Sid": ""
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "role_attach" {
  role       = aws_iam_role.role-ec2-ssm.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

################
# EC2 instances
################
module "ec2_instances" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "~> 2.0"


  name                        = "CVE-WINDAO"
  ami                         = data.aws_ami.win20H2march.id
  instance_type               = "t3.small"
  vpc_security_group_ids      = [module.security_group.security_group_id]
  subnet_id                   = element(tolist(data.aws_subnet_ids.all.ids), 0)
  associate_public_ip_address = true
  iam_instance_profile = aws_iam_instance_profile.ec2-ssm.name
  #Install IIS on userdata
  user_data                   = <<EOF
<powershell>
Install-WindowsFeature -name Web-Server -IncludeManagementTools
</powershell>
EOF


}